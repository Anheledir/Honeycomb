using BaseBotService.Core.Messages;
using Discord.WebSocket;
using Microsoft.Extensions.Logging;
using System.Reflection;

namespace BaseBotService.Core;

/// <summary>
/// Listens to Discord events and publishes corresponding notifications using MediatR.
/// </summary>
public class DiscordEventListener
{
    private readonly ILogger<DiscordEventListener> _logger;
    private readonly DiscordSocketClient _client;
    private readonly IServiceProvider _services;
    private readonly InteractionService _interactionService;
    private readonly IMediator _mediator;
    private readonly CancellationToken _cancellationToken;

    /// <summary>
    /// Initializes a new instance of the <see cref="DiscordEventListener"/> class.
    /// </summary>
    /// <param name="logger">The logger instance.</param>
    /// <param name="client">The Discord socket client.</param>
    /// <param name="services">The service provider.</param>
    /// <param name="interactionService">The interaction service for handling interactions.</param>
    /// <param name="mediator">The mediator instance for publishing notifications.</param>
    public DiscordEventListener(
        ILogger<DiscordEventListener> logger,
        DiscordSocketClient client,
        IServiceProvider services,
        InteractionService interactionService,
        IMediator mediator)
    {
        _logger = logger;
        _client = client;
        _services = services;
        _interactionService = interactionService;
        _mediator = mediator;
        _cancellationToken = new CancellationTokenSource().Token;
    }

    /// <summary>
    /// Starts the Discord event listener, subscribing to events and loading interaction modules.
    /// </summary>
    public async Task StartAsync()
    {
        _logger.LogInformation("Starting Discord event listener.");

        // Subscribe to the MessageReceived event, which is triggered when a message is received
        _client.MessageReceived += (socketMessage) => _mediator.Publish(new MessageReceivedNotification(socketMessage), _cancellationToken);

        // Subscribe to the Log event, which is triggered when a log message is generated by Discord
        _client.Log += (msg) => _mediator.Publish(new LogNotification(msg), _cancellationToken);

        // Subscribe to the ReactionAdded event, which is triggered when a reaction is added to a message
        _client.ReactionAdded += (cache, channel, reaction) => _mediator.Publish(new ReactionAddedNotification(cache, channel, reaction), _cancellationToken);

        // Subscribe to the Ready event, which is triggered when the Discord client is ready
        _client.Ready += () => _mediator.Publish(new ClientReadyNotification(), _cancellationToken);

        // Subscribe to the Disconnected event, which is triggered when the Discord client disconnects
        _client.Disconnected += (ex) => _mediator.Publish(new ClientDisconnectedNotification(ex), _cancellationToken);

        // Subscribe to the InteractionCreated event, which is triggered when an interaction is created
        _client.InteractionCreated += (interaction) => _mediator.Publish(new InteractionCreatedNotification(interaction), _cancellationToken);

        // Subscribe to the JoinedGuild event, which is triggered when the bot joins a guild
        _client.JoinedGuild += (guild) => _mediator.Publish(new BotJoinedGuildNotification(guild), _cancellationToken);

        // Subscribe to the LeftGuild event, which is triggered when the bot leaves a guild
        _client.LeftGuild += (guild) => _mediator.Publish(new BotLeftGuildNotification(guild), _cancellationToken);

        // Subscribe to the UserJoined event, which is triggered when a user joins a guild
        _client.UserJoined += (user) => _mediator.Publish(new UserJoinedNotification(user), _cancellationToken);

        // Subscribe to the UserJoinedGuild event, which is triggered when a user joins a guild
        _client.UserJoined += (user) => _mediator.Publish(new UserJoinedGuildNotification(user.Guild.Id, user.Id), _cancellationToken);

        // Subscribe to the GuildJoinRequestDeleted event, which is triggered when a user cancels a mandatory welcome/rule page on joining a guild and leaves again
        _client.GuildJoinRequestDeleted += (user, guild) => _mediator.Publish(new GuildJoinRequestDeletedNotification(guild.Id, user.Id), _cancellationToken);

        // Subscribe to the UserLeft event, which is triggered when a user leaves a guild
        _client.UserLeft += (guild, user) => _mediator.Publish(new UserLeftGuildNotification(guild.Id, user.Id), _cancellationToken);

        // Subscribe to the Log event from the interaction service, which is triggered when a log message is generated
        _interactionService.Log += (msg) => _mediator.Publish(new LogNotification(msg), _cancellationToken);

        // Load interaction modules
        _ = await _interactionService.AddModulesAsync(Assembly.GetEntryAssembly(), _services);
        _logger.LogInformation($"Found {_interactionService.Modules.Count} modules.");

        _logger.LogInformation("Discord event listener started.");
        await Task.CompletedTask;
    }

    #region Public record declarations for various Discord events

    /// <summary>
    /// Notification that is published when the Discord client is ready.
    /// </summary>
    public record ClientReadyNotification() : INotification;

    /// <summary>
    /// Notification that is published when an activity update is needed.
    /// Contains the new activity description and user status.
    /// </summary>
    /// <param name="Description">The description of the activity.</param>
    /// <param name="Status">The status of the user (e.g., Online, DoNotDisturb).</param>
    public record UpdateActivityNotification(string Description, UserStatus Status, IEmote? emoji = null) : INotification;

    /// <summary>
    /// Notification that is published when the Discord client disconnects.
    /// Contains the exception that caused the disconnect.
    /// </summary>
    /// <param name="DisconnectException">The exception that caused the disconnect.</param>
    public record ClientDisconnectedNotification(Exception DisconnectException) : INotification;

    /// <summary>
    /// Notification that is published when an interaction (e.g., slash command) is created.
    /// Contains the interaction data.
    /// </summary>
    /// <param name="Interaction">The interaction that was created.</param>
    public record InteractionCreatedNotification(SocketInteraction Interaction) : INotification;

    /// <summary>
    /// Notification that is published when the bot joins a guild.
    /// Contains the guild information.
    /// </summary>
    /// <param name="Guild">The guild that the bot joined.</param>
    public record BotJoinedGuildNotification(SocketGuild Guild) : INotification;

    /// <summary>
    /// Notification that is published when the bot leaves a guild.
    /// Contains the guild information.
    /// </summary>
    /// <param name="Guild">The guild that the bot left.</param>
    public record BotLeftGuildNotification(SocketGuild Guild) : INotification;

    /// <summary>
    /// Notification that is published when a log message is generated by Discord.
    /// Contains the log message data.
    /// </summary>
    /// <param name="LogMessage">The log message generated by Discord.</param>
    public record LogNotification(LogMessage LogMessage) : INotification;

    /// <summary>
    /// Notification that is published when a reaction is added to a message.
    /// Contains the message, channel, and reaction data.
    /// </summary>
    /// <param name="Message">The message to which the reaction was added.</param>
    /// <param name="Channel">The channel containing the message.</param>
    /// <param name="Reaction">The reaction that was added.</param>
    public record ReactionAddedNotification(Cacheable<IUserMessage, ulong> Message, Cacheable<IMessageChannel, ulong> Channel, SocketReaction Reaction) : INotification;

    /// <summary>
    /// Notification that is published when a user joins a guild.
    /// Contains the guild ID and user ID.
    /// </summary>
    /// <param name="GuildId">The ID of the guild the user joined.</param>
    /// <param name="UserId">The ID of the user who joined the guild.</param>
    public record UserJoinedGuildNotification(ulong GuildId, ulong UserId) : INotification;

    /// <summary>
    /// Notification that is published when a user joins a guild.
    /// Contains the user data.
    /// </summary>
    /// <param name="User">The user who joined the guild.</param>
    public record UserJoinedNotification(SocketGuildUser User) : INotification;

    /// <summary>
    /// Notification that is published when a user leaves a guild.
    /// Contains the guild ID and user ID.
    /// </summary>
    /// <param name="GuildId">The ID of the guild the user left.</param>
    /// <param name="UserId">The ID of the user who left the guild.</param>
    public record UserLeftGuildNotification(ulong GuildId, ulong UserId) : INotification;

    /// <summary>
    /// Notification that is published when a guild join request is deleted.
    /// Contains the guild ID and user ID.
    /// </summary>
    /// <param name="GuildId">The ID of the guild associated with the join request.</param>
    /// <param name="UserId">The ID of the user whose join request was deleted.</param>
    public record GuildJoinRequestDeletedNotification(ulong GuildId, ulong UserId) : INotification;
    #endregion
}
